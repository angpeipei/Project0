/// <reference types="node" />
import { Stream } from 'stream';
import { ObjectID, ObjectId, Db, GridFSBucket, GridFSBucketReadStream } from 'mongodb';
import { IOptions, IDownloadOptions, IDirectory, IGridFSWriteOption, IGridFSObject } from './interfaces';
export default class GridStore {
    readonly bucketName: string;
    connection: Db;
    private opts;
    private _queue;
    constructor(opts: IOptions, bucketName?: string);
    readonly bucket: GridFSBucket;
    private _addQueue;
    connect(): Promise<void>;
    static getDownloadPath(object: IGridFSObject, options?: IDownloadOptions): string;
    readFileStream(id: string): Promise<GridFSBucketReadStream>;
    readFileStreamByPath(path: string): Promise<GridFSBucketReadStream>;
    downloadFile(id: string, options?: IDownloadOptions): Promise<string>;
    findById(id: string): Promise<IGridFSObject>;
    findOne(filter: any): Promise<IGridFSObject>;
    find(filter: any): Promise<IGridFSObject[]>;
    writeFileStream(stream: Stream, options: IGridFSWriteOption): Promise<IGridFSObject>;
    uploadFile(uploadFilePath: string, options: IGridFSWriteOption, deleteFile?: boolean): Promise<IGridFSObject>;
    delete(id: string): Promise<boolean>;
    exists(filename: string, md5?: string): Promise<boolean>;
    readonly directory: Directory;
}
declare class Directory extends GridStore {
    readonly bucketName: string;
    constructor(opts: IOptions, bucketName?: string);
    readonly collection: any;
    private _checkConnect;
    exists(path: string): Promise<boolean>;
    create(directoryPath: string): Promise<void>;
    getPath(path: string): Promise<IDirectory>;
    private _getChildrens;
    listByPath(path: string): Promise<{}>;
    listById(id: string): Promise<{}>;
    remove(path: string): Promise<void>;
    removeById(id: string): Promise<void>;
}
export { ObjectID, ObjectId };
