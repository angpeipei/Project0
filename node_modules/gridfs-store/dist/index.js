"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var URL = require("url");
var mime = require("mime");
var path = require("path");
var async = require("async");
var osTmpdir = require("os-tmpdir");
var uniqueFilename = require("unique-filename");
var mongodb_1 = require("mongodb");
exports.ObjectID = mongodb_1.ObjectID;
exports.ObjectId = mongodb_1.ObjectId;
var defaultOptions = {
    hosts: [
        { host: 'localhost', port: 27017 }
    ],
    database: 'default'
};
var GridStore = (function () {
    function GridStore(opts, bucketName) {
        if (bucketName === void 0) { bucketName = 'fs'; }
        this.bucketName = bucketName;
        this.opts = defaultOptions;
        this._queue = async.queue(function (_a, done) {
            var action = _a.action, item = _a.item;
        }, 1);
        if (Object.keys(opts).length > 0) {
            this.opts = Object.assign({}, defaultOptions, opts);
        }
    }
    Object.defineProperty(GridStore.prototype, "bucket", {
        get: function () {
            return new mongodb_1.GridFSBucket(this.connection, { bucketName: this.bucketName });
        },
        enumerable: true,
        configurable: true
    });
    GridStore.prototype._addQueue = function (action, item) {
        this._queue.push({ action: action, item: item });
    };
    GridStore.prototype.connect = function () {
        return __awaiter(this, void 0, void 0, function () {
            var hosts, query, uri, mongoOpts;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        hosts = (this.opts.hosts || defaultOptions.hosts).map(function (_a) {
                            var host = _a.host, port = _a.port;
                            host = host || 'localhost';
                            port = port || 27017;
                            return [host, port].join(':');
                        }).join(',');
                        query = {};
                        if (this.opts.replicaSet) {
                            query.replicaSet = this.opts.replicaSet;
                        }
                        if (this.opts.authSource) {
                            query.authSource = this.opts.authSource;
                        }
                        uri = URL.format({
                            protocol: 'mongodb',
                            slashes: true,
                            host: hosts,
                            pathname: this.opts.database,
                            query: query
                        });
                        mongoOpts = {
                            reconnectTries: Number.MAX_VALUE,
                            reconnectInterval: 500,
                            autoReconnect: true,
                            poolSize: 1e6,
                            keepAlive: true,
                            bufferMaxEntries: 0,
                            useNewUrlParser: true
                        };
                        if (this.opts.mongoClientOptions && Object.keys(this.opts.mongoClientOptions).length > 0) {
                            mongoOpts = Object.assign({}, mongoOpts, this.opts.mongoClientOptions);
                        }
                        return [4, mongodb_1.MongoClient.connect(uri, mongoOpts).then(function (client) {
                                _this.connection = client.db(_this.opts.database);
                                return client;
                            }).catch(function (e) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4, this.connect()];
                                        case 1:
                                            _a.sent();
                                            return [2];
                                    }
                                });
                            }); })];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    GridStore.getDownloadPath = function (object, options) {
        if (options === void 0) { options = { filename: false }; }
        var finalPath = '';
        if (!options.targetDir) {
            if (typeof options.filename === 'string') {
                finalPath = osTmpdir() + "/" + options.filename;
            }
            else {
                if (options.filename === true) {
                    finalPath = osTmpdir() + "/" + object._id;
                }
                else {
                    finalPath = uniqueFilename(osTmpdir());
                }
            }
        }
        else {
            if (typeof options.filename === 'string') {
                finalPath = options.targetDir + "/" + options.filename;
            }
            else {
                if (options.filename === true) {
                    finalPath = object.filename;
                }
                else {
                    finalPath = uniqueFilename(options.targetDir);
                }
            }
        }
        return finalPath;
    };
    GridStore.prototype.readFileStream = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var object;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.findById(id)];
                    case 1:
                        object = _a.sent();
                        return [2, this.bucket.openDownloadStream(object._id)];
                }
            });
        });
    };
    GridStore.prototype.readFileStreamByPath = function (path) {
        return __awaiter(this, void 0, void 0, function () {
            var object;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.findOne({ filename: path })];
                    case 1:
                        object = _a.sent();
                        console.log('readFileStreamByPath', object);
                        return [2, this.bucket.openDownloadStream(object._id)];
                }
            });
        });
    };
    GridStore.prototype.downloadFile = function (id, options) {
        return __awaiter(this, void 0, void 0, function () {
            var object, downloadPath;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.findById(id)];
                    case 1:
                        object = _a.sent();
                        downloadPath = GridStore.getDownloadPath(object, options);
                        return [2, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                                var _this = this;
                                return __generator(this, function (_a) {
                                    this.bucket.openDownloadStream(object._id)
                                        .once('error', function (error) { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            reject(error);
                                            return [2];
                                        });
                                    }); })
                                        .once('end', function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            resolve(downloadPath);
                                            return [2];
                                        });
                                    }); })
                                        .pipe(fs.createWriteStream(downloadPath, {}));
                                    return [2];
                                });
                            }); })];
                }
            });
        });
    };
    GridStore.prototype.findById = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.findOne({ _id: new mongodb_1.ObjectID(id) })];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    GridStore.prototype.findOne = function (filter) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.find(filter)];
                    case 1:
                        result = _a.sent();
                        if (result.length === 0) {
                            throw new Error('No Object found');
                        }
                        return [2, result[0]];
                }
            });
        });
    };
    GridStore.prototype.find = function (filter) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.bucket.find(filter).toArray()];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    GridStore.prototype.writeFileStream = function (stream, options) {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var fileOpts;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fileOpts = {
                            aliases: options.aliases,
                            chunkSizeBytes: options.chunkSizeBytes,
                            contentType: options.contentType,
                            metadata: options.metadata,
                        };
                        return [4, this.directory.create(path.dirname(options.filename))];
                    case 1:
                        _a.sent();
                        return [4, this.directory.getPath(path.dirname(options.filename)).then(function (doc) {
                                fileOpts.metadata = Object.assign({}, fileOpts.metadata, {
                                    directoryId: doc._id
                                });
                            })];
                    case 2:
                        _a.sent();
                        stream
                            .pipe(this.bucket.openUploadStream(options.filename, fileOpts))
                            .on('error', function (err) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                reject(err);
                                return [2];
                            });
                        }); })
                            .on('finish', function (item) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                resolve(item);
                                return [2];
                            });
                        }); });
                        return [2];
                }
            });
        }); });
    };
    GridStore.prototype.uploadFile = function (uploadFilePath, options, deleteFile) {
        if (deleteFile === void 0) { deleteFile = true; }
        return __awaiter(this, void 0, void 0, function () {
            var tryDeleteFile;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!fs.existsSync(uploadFilePath)) {
                            throw new Error('File not found');
                        }
                        tryDeleteFile = function (obj) {
                            if (fs.existsSync(uploadFilePath) && deleteFile === true) {
                                fs.unlinkSync(uploadFilePath);
                            }
                            return obj;
                        };
                        options.contentType = options.contentType || mime.getType(uploadFilePath);
                        return [4, this.directory.create(path.dirname(options.filename))];
                    case 1:
                        _a.sent();
                        return [4, this.writeFileStream(fs.createReadStream(uploadFilePath), options)
                                .then(tryDeleteFile)
                                .catch(function (err) {
                                tryDeleteFile();
                                throw err;
                            })];
                    case 2: return [2, _a.sent()];
                }
            });
        });
    };
    GridStore.prototype.delete = function (id) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.bucket.delete(new mongodb_1.ObjectID(id), (function (err) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (err) {
                        reject(err);
                    }
                    resolve(true);
                    return [2];
                });
            }); }));
        });
    };
    GridStore.prototype.exists = function (filename, md5) {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var params, doc;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        params = { filename: filename, md5: md5 };
                        if (!md5) {
                            delete params.md5;
                        }
                        return [4, this.findOne(params)];
                    case 1:
                        doc = _a.sent();
                        resolve(!(doc === null));
                        return [2];
                }
            });
        }); });
    };
    Object.defineProperty(GridStore.prototype, "directory", {
        get: function () {
            return new Directory(this.opts, this.bucketName);
        },
        enumerable: true,
        configurable: true
    });
    return GridStore;
}());
exports.default = GridStore;
var Directory = (function (_super) {
    __extends(Directory, _super);
    function Directory(opts, bucketName) {
        if (bucketName === void 0) { bucketName = 'fs'; }
        var _this = _super.call(this, opts, bucketName) || this;
        _this.bucketName = bucketName;
        return _this;
    }
    Object.defineProperty(Directory.prototype, "collection", {
        get: function () {
            return this.connection.collection([this.bucketName, 'directory'].join('.'));
        },
        enumerable: true,
        configurable: true
    });
    Directory.prototype._checkConnect = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.connection) return [3, 2];
                        return [4, this.connect()];
                    case 1:
                        _a.sent();
                        this.collection.createIndex({ name: 1 });
                        this.collection.createIndex({ path: 1 });
                        this.collection.createIndex({ name: 1, path: 1 }, { unique: 1 });
                        _a.label = 2;
                    case 2: return [2];
                }
            });
        });
    };
    Directory.prototype.exists = function (path) {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this._checkConnect()];
                    case 1:
                        _a.sent();
                        this.collection.findOne({ path: path }, function (error, raw) {
                            if (error) {
                                return reject(error);
                            }
                            resolve(raw !== null && typeof raw === 'object' && raw.hasOwnProperty('_id'));
                        });
                        return [2];
                }
            });
        }); });
    };
    Directory.prototype.create = function (directoryPath) {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var obj, names, save, pid_1, _loop_1, this_1, _i, names_1, item;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this._checkConnect()];
                    case 1:
                        _a.sent();
                        obj = {
                            path: directoryPath,
                            name: '',
                            parentId: null,
                            created: new Date()
                        };
                        if (directoryPath !== '/') {
                            obj.name = path.basename(directoryPath);
                        }
                        names = directoryPath.split('/')
                            .filter(function (item, idx) {
                            if (idx > 0 && item === '') {
                                return false;
                            }
                            return true;
                        })
                            .reduce(function (arr, name) {
                            arr.push({
                                path: arr.length === 0 ? '/' : path.resolve(arr[arr.length - 1].path, name),
                                created: new Date(),
                                name: name
                            });
                            return arr;
                        }, []);
                        save = function (data, cb) {
                            return new Promise(function (resolve, reject) {
                                _this.collection.insertOne(data, function (err, raw) {
                                    if (cb) {
                                        cb(err, raw);
                                    }
                                    else {
                                        if (err) {
                                            if (String(err.message).includes('duplicate key')) {
                                                return resolve();
                                            }
                                            return reject(err);
                                        }
                                        resolve();
                                    }
                                });
                            });
                        };
                        if (!(names.length === 1 && ['', '/'].includes(names[0].path))) return [3, 2];
                        save(obj, function (err) {
                            if (err) {
                                return reject(err);
                            }
                            resolve();
                        });
                        return [3, 7];
                    case 2:
                        pid_1 = null;
                        _loop_1 = function (item) {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (item.path !== '/') {
                                            item.parentId = pid_1;
                                        }
                                        if (!(!item.parentId && item.path !== '/')) return [3, 2];
                                        return [4, this_1.getPath(path.dirname(item.path)).then(function (doc) {
                                                item.parentId = doc._id;
                                            })];
                                    case 1:
                                        _a.sent();
                                        _a.label = 2;
                                    case 2: return [4, save(item).then(function (raw) {
                                            if (raw && raw.insertedId) {
                                                pid_1 = raw.insertedId;
                                            }
                                        })];
                                    case 3:
                                        _a.sent();
                                        return [2];
                                }
                            });
                        };
                        this_1 = this;
                        _i = 0, names_1 = names;
                        _a.label = 3;
                    case 3:
                        if (!(_i < names_1.length)) return [3, 6];
                        item = names_1[_i];
                        return [5, _loop_1(item)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        _i++;
                        return [3, 3];
                    case 6:
                        resolve();
                        _a.label = 7;
                    case 7: return [2];
                }
            });
        }); });
    };
    Directory.prototype.getPath = function (path) {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this._checkConnect()];
                    case 1:
                        _a.sent();
                        this.collection.findOne({ path: path }, function (err, doc) {
                            if (err) {
                                return reject(err);
                            }
                            resolve(doc);
                        });
                        return [2];
                }
            });
        }); });
    };
    Directory.prototype._getChildrens = function (parentId) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.collection.find({ parentId: parentId }).toArray(function (err, list) {
                if (err) {
                    return reject(err);
                }
                resolve(list);
            });
        });
    };
    Directory.prototype.listByPath = function (path) {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this._checkConnect()];
                    case 1:
                        _a.sent();
                        return [4, this.getPath(path)
                                .then(function (doc) {
                                if (doc && doc._id) {
                                    _this._getChildrens(doc._id).then(function (list) { return resolve(list); }).catch(reject);
                                }
                                else {
                                    resolve([]);
                                }
                            })
                                .catch(reject)];
                    case 2:
                        _a.sent();
                        return [2];
                }
            });
        }); });
    };
    Directory.prototype.listById = function (id) {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this._checkConnect()];
                    case 1:
                        _a.sent();
                        this._getChildrens(new mongodb_1.ObjectID(id)).then(resolve).catch(reject);
                        return [2];
                }
            });
        }); });
    };
    Directory.prototype.remove = function (path) {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this._checkConnect()];
                    case 1:
                        _a.sent();
                        this.collection.deleteMany({ path: path }, function (err) {
                            if (err) {
                                return reject(err);
                            }
                            resolve();
                        });
                        return [2];
                }
            });
        }); });
    };
    Directory.prototype.removeById = function (id) {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this._checkConnect()];
                    case 1:
                        _a.sent();
                        this.collection.deleteOne({ _id: new mongodb_1.ObjectID(id) }, function (err) {
                            if (err) {
                                return reject(err);
                            }
                            resolve();
                        });
                        return [2];
                }
            });
        }); });
    };
    return Directory;
}(GridStore));
//# sourceMappingURL=index.js.map